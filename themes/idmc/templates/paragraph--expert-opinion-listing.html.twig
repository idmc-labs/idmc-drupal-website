{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished', 'row'
  ]
  
%}
<style>
.row.rowfeature {
display:block;

}

.row.rowfeature img {
object-fit:cover;
width:100px;
height:100px;
border-radius:50%;
}

@media (min-width:992px) {
.row.rowfeature {
display:flex;
align-items:center;
}
.row.rowfeature img {
width:200px;
height:200px;
}
}
article.expert-opinion {
padding-bottom:0
}
//#f6f6f6
</style>
{% block paragraph %}
  <div{{ attributes.addClass(classes) }} style="background:#ffffff">
    {% block content %}
     
    {% set items_count = content.field_paragraphs_max2['#items']|length %}

        <div class="container">
            <div class="row">
                <div class="col-md-8">
                    <h2 class="paragraph-title">{{ content.field_paragraph_title.0 }}</h2>
                </div>
                <div class="col-md-4 inline-button">
                {% if content.field_paragraph_readmore_link is not empty %}
                <a class="readmore font18" href="/expert-opinion">
                      {{ content.field_paragraph_readmore_link }}
                  </a>
                {% endif %}
                </div>
            </div>
        </div>
        <div class="container">
<div class="row">
        {% for key, item in content.field_paragraphs_max2 if key|first != '#' %}
         <div class="col-xs-6 col-md-6 row-separator">{{ item }}</div>	
        {% endfor %}
</div>
</div>
    {% endblock %}
  </div>
{% endblock paragraph %}